/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import util.Som;
import controller.ControllerProdutos;
import controller.ControllerProdutosVendasProdutos;
import controller.ControllerVendas;
import controller.ControllerVendasProdutos;
import java.awt.Color;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import model.ModelProdutos;
import model.ModelProdutosVendasProdutos;
import model.ModelVendas;
import model.ModelVendasProdutos;
import util.BLDatas;
import java.awt.Font;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import javax.swing.event.InternalFrameEvent;
import javax.swing.plaf.FontUIResource;
import util.Formatador;

/**
 *
 * @author afbo2
 */
public class Caixa extends javax.swing.JInternalFrame {

    ArrayList<ModelVendasProdutos> listaModelVendasProdutos = new ArrayList<>();
    ControllerVendasProdutos controllerVendasProdutos = new ControllerVendasProdutos();
    ModelVendasProdutos modelVendasProdutos = new ModelVendasProdutos();

    ArrayList<ModelProdutos> listaModelProdutos = new ArrayList<>();
    
    ControllerProdutos controllerProdutos = new ControllerProdutos();
    ModelProdutos modelProdutos = new ModelProdutos();

    ModelVendas modelVendas = new ModelVendas();
    ControllerVendas controllerVendas = new ControllerVendas();

    ControllerProdutosVendasProdutos controllerProdutosVendasProdutos = new ControllerProdutosVendasProdutos();
    ModelProdutosVendasProdutos modelProdutosVendasProdutos = new ModelProdutosVendasProdutos();
    ArrayList<ModelProdutosVendasProdutos> listaModelProdutosVendasProdutos = new ArrayList<>();

    BLDatas blDatas = new BLDatas();
    Som som = new Som();
    Formatador f = new Formatador();

    int Quantidade;
    Double Desconto = 0.0;
    Double ValorRecebido;
    Double ValorTotal = 0.0;
    int Parcelas;
    int cliente;
    String DinheiroCartao = "dinheiro";

    /**
     * Creates new form Caixa
     */
    public Caixa() {
        initComponents();
        jbEnviarProduto.setVisible(false);
        jbRetornar.setVisible(false);
        jtfPesquisa.setVisible(false);
        jbRetornar.setEnabled(false);
        jbInicio.setVisible(false);
        carregarProdutos();
        customTable();

        UIManager.put("OptionPane.messageFont", new FontUIResource(new Font(null, Font.BOLD, 20))); // Aqui vocÃª muda o nome e tamanho da fonte.

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painelDesktop = new javax.swing.JLayeredPane();
        painelBotoes = new javax.swing.JPanel();
        jbCancelar = new javax.swing.JButton();
        jbDesconto = new javax.swing.JButton();
        jbRemover = new javax.swing.JButton();
        jbEfetuarVenda = new javax.swing.JButton();
        painelOpcoesVenda = new javax.swing.JPanel();
        painelSobreporBTN2 = new javax.swing.JPanel();
        painelLista = new javax.swing.JPanel();
        jbListaProdutos = new javax.swing.JButton();
        painelPesquisa = new javax.swing.JPanel();
        jtfPesquisa = new javax.swing.JTextField();
        jbRetornar = new javax.swing.JButton();
        painelSobreporBTN1 = new javax.swing.JPanel();
        painelDinheiroCartao = new javax.swing.JPanel();
        jbDinheiro = new javax.swing.JButton();
        jbCartao = new javax.swing.JButton();
        jbPrazo = new javax.swing.JButton();
        painelEnviarProduto = new javax.swing.JPanel();
        jbEnviarProduto = new javax.swing.JButton();
        jtfTipoVenda = new javax.swing.JTextField();
        painelTabelas = new javax.swing.JPanel();
        painelProdutosDaVenda = new javax.swing.JScrollPane();
        jtProdutosDaVenda = new javax.swing.JTable();
        painelListaDeProdutos = new javax.swing.JScrollPane();
        jtListaDeProdutos = new javax.swing.JTable();
        painelTituloTabela = new javax.swing.JPanel();
        jtfProdutosDaVenda = new javax.swing.JTextField();
        jtfListaDeProdutos = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jbInicio = new javax.swing.JButton();
        painelInfo = new javax.swing.JPanel();
        painelValorTotal = new javax.swing.JPanel();
        jlValorTotal = new javax.swing.JLabel();
        jtfValorTotal = new javax.swing.JFormattedTextField();
        painelDesconto = new javax.swing.JPanel();
        jlDesconto = new javax.swing.JLabel();
        jtfDesconto = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 204, 204));
        setBorder(null);
        setClosable(true);
        setMaximumSize(new java.awt.Dimension(1010, 580));
        setMinimumSize(new java.awt.Dimension(1010, 580));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(1010, 580));
        setRequestFocusEnabled(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        painelDesktop.setBackground(new java.awt.Color(255, 204, 204));
        painelDesktop.setToolTipText("");
        painelDesktop.setMaximumSize(new java.awt.Dimension(1010, 560));
        painelDesktop.setMinimumSize(new java.awt.Dimension(1010, 560));
        painelDesktop.setOpaque(true);
        painelDesktop.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                painelDesktopKeyPressed(evt);
            }
        });

        painelBotoes.setBackground(new java.awt.Color(255, 204, 204));
        painelBotoes.setLayout(new java.awt.GridLayout(4, 1, 5, 10));

        jbCancelar.setBackground(new java.awt.Color(255, 51, 51));
        jbCancelar.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jbCancelar.setForeground(new java.awt.Color(255, 255, 255));
        jbCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vania's bg/cancelar (3).png"))); // NOI18N
        jbCancelar.setText("Cancelar Venda");
        jbCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });
        painelBotoes.add(jbCancelar);

        jbDesconto.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jbDesconto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vania's bg/desconto.png"))); // NOI18N
        jbDesconto.setText("Conceder Desconto");
        jbDesconto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbDesconto.setEnabled(false);
        jbDesconto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDescontoActionPerformed(evt);
            }
        });
        painelBotoes.add(jbDesconto);

        jbRemover.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jbRemover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vania's bg/remover-do-carrinho.png"))); // NOI18N
        jbRemover.setText("Remover Produto");
        jbRemover.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoverActionPerformed(evt);
            }
        });
        painelBotoes.add(jbRemover);

        jbEfetuarVenda.setBackground(new java.awt.Color(102, 255, 102));
        jbEfetuarVenda.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jbEfetuarVenda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vania's bg/financiamento-colaborativo.png"))); // NOI18N
        jbEfetuarVenda.setText("Efetuar Venda");
        jbEfetuarVenda.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbEfetuarVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEfetuarVendaActionPerformed(evt);
            }
        });
        painelBotoes.add(jbEfetuarVenda);

        painelOpcoesVenda.setBackground(new java.awt.Color(255, 204, 204));

        painelSobreporBTN2.setBackground(new java.awt.Color(255, 204, 204));
        painelSobreporBTN2.setLayout(new javax.swing.OverlayLayout(painelSobreporBTN2));

        painelLista.setBackground(new java.awt.Color(255, 204, 204));

        jbListaProdutos.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jbListaProdutos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vania's bg/pesquisa-de-dados.png"))); // NOI18N
        jbListaProdutos.setText("Lista de Produtos");
        jbListaProdutos.setMaximumSize(new java.awt.Dimension(219, 70));
        jbListaProdutos.setMinimumSize(new java.awt.Dimension(219, 70));
        jbListaProdutos.setPreferredSize(new java.awt.Dimension(219, 219));
        jbListaProdutos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbListaProdutosActionPerformed(evt);
            }
        });
        jbListaProdutos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbListaProdutosKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout painelListaLayout = new javax.swing.GroupLayout(painelLista);
        painelLista.setLayout(painelListaLayout);
        painelListaLayout.setHorizontalGroup(
            painelListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelListaLayout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addComponent(jbListaProdutos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );
        painelListaLayout.setVerticalGroup(
            painelListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelListaLayout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(jbListaProdutos, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        painelSobreporBTN2.add(painelLista);

        painelPesquisa.setBackground(new java.awt.Color(255, 204, 204));
        painelPesquisa.setForeground(new java.awt.Color(255, 204, 255));
        painelPesquisa.setOpaque(false);

        jtfPesquisa.setBackground(new java.awt.Color(255, 204, 204));
        jtfPesquisa.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jtfPesquisa.setForeground(new java.awt.Color(0, 0, 0));
        jtfPesquisa.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfPesquisa.setText("Pesquisar Produto");
        jtfPesquisa.setOpaque(false);
        jtfPesquisa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtfPesquisaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfPesquisaFocusLost(evt);
            }
        });
        jtfPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfPesquisaActionPerformed(evt);
            }
        });
        jtfPesquisa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtfPesquisaKeyTyped(evt);
            }
        });

        jbRetornar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vania's bg/undo.png"))); // NOI18N
        jbRetornar.setEnabled(false);
        jbRetornar.setOpaque(false);
        jbRetornar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRetornarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelPesquisaLayout = new javax.swing.GroupLayout(painelPesquisa);
        painelPesquisa.setLayout(painelPesquisaLayout);
        painelPesquisaLayout.setHorizontalGroup(
            painelPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelPesquisaLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jtfPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbRetornar))
        );
        painelPesquisaLayout.setVerticalGroup(
            painelPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelPesquisaLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(painelPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtfPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbRetornar))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        painelSobreporBTN2.add(painelPesquisa);

        painelSobreporBTN1.setBackground(new java.awt.Color(255, 204, 255));
        painelSobreporBTN1.setLayout(new javax.swing.OverlayLayout(painelSobreporBTN1));

        painelDinheiroCartao.setBackground(new java.awt.Color(255, 204, 204));

        jbDinheiro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vania's bg/money (1).png"))); // NOI18N
        jbDinheiro.setEnabled(false);
        jbDinheiro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDinheiroActionPerformed(evt);
            }
        });
        painelDinheiroCartao.add(jbDinheiro);

        jbCartao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vania's bg/cartao-de-credito (1).png"))); // NOI18N
        jbCartao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCartaoActionPerformed(evt);
            }
        });
        painelDinheiroCartao.add(jbCartao);

        jbPrazo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vania's bg/caderneta.png"))); // NOI18N
        jbPrazo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPrazoActionPerformed(evt);
            }
        });
        painelDinheiroCartao.add(jbPrazo);

        painelSobreporBTN1.add(painelDinheiroCartao);

        painelEnviarProduto.setBackground(new java.awt.Color(255, 204, 204));

        jbEnviarProduto.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jbEnviarProduto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vania's bg/money.png"))); // NOI18N
        jbEnviarProduto.setText("Enviar Produto");
        jbEnviarProduto.setMaximumSize(new java.awt.Dimension(219, 70));
        jbEnviarProduto.setMinimumSize(new java.awt.Dimension(219, 70));
        jbEnviarProduto.setPreferredSize(new java.awt.Dimension(219, 219));
        jbEnviarProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEnviarProdutoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelEnviarProdutoLayout = new javax.swing.GroupLayout(painelEnviarProduto);
        painelEnviarProduto.setLayout(painelEnviarProdutoLayout);
        painelEnviarProdutoLayout.setHorizontalGroup(
            painelEnviarProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelEnviarProdutoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbEnviarProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(116, Short.MAX_VALUE))
        );
        painelEnviarProdutoLayout.setVerticalGroup(
            painelEnviarProdutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelEnviarProdutoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbEnviarProduto, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                .addContainerGap())
        );

        painelSobreporBTN1.add(painelEnviarProduto);

        jtfTipoVenda.setEditable(false);
        jtfTipoVenda.setBackground(new java.awt.Color(255, 204, 204));
        jtfTipoVenda.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jtfTipoVenda.setForeground(new java.awt.Color(0, 0, 0));
        jtfTipoVenda.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfTipoVenda.setText("Venda a Vista");
        jtfTipoVenda.setBorder(null);
        jtfTipoVenda.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtfTipoVendaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfTipoVendaFocusLost(evt);
            }
        });
        jtfTipoVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfTipoVendaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelOpcoesVendaLayout = new javax.swing.GroupLayout(painelOpcoesVenda);
        painelOpcoesVenda.setLayout(painelOpcoesVendaLayout);
        painelOpcoesVendaLayout.setHorizontalGroup(
            painelOpcoesVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelOpcoesVendaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelSobreporBTN1, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painelSobreporBTN2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(painelOpcoesVendaLayout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(jtfTipoVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        painelOpcoesVendaLayout.setVerticalGroup(
            painelOpcoesVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelOpcoesVendaLayout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(jtfTipoVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(painelOpcoesVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(painelSobreporBTN1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(painelSobreporBTN2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        painelTabelas.setBackground(new java.awt.Color(255, 204, 204));
        painelTabelas.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        painelTabelas.setLayout(new javax.swing.OverlayLayout(painelTabelas));

        painelProdutosDaVenda.setBackground(new java.awt.Color(51, 51, 51));
        painelProdutosDaVenda.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        painelProdutosDaVenda.setForeground(new java.awt.Color(255, 255, 255));

        jtProdutosDaVenda.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        JTableHeader cabecalho = jtProdutosDaVenda.getTableHeader();
        cabecalho.setBackground(new java.awt.Color(255,255,255));
        cabecalho.setFont((new java.awt.Font("Dialog", 1, 18)));
        jtProdutosDaVenda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CÃ³digo", "Produto", "Valor", "Quantidade", "Total", "ValorCompra", "Desconto"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtProdutosDaVenda.setGridColor(new java.awt.Color(255, 204, 255));
        jtProdutosDaVenda.setRowHeight(25);
        jtProdutosDaVenda.setRowMargin(5);
        jtProdutosDaVenda.setSelectionBackground(new java.awt.Color(255, 204, 204));
        jtProdutosDaVenda.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jtProdutosDaVenda.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        painelProdutosDaVenda.setViewportView(jtProdutosDaVenda);
        if (jtProdutosDaVenda.getColumnModel().getColumnCount() > 0) {
            jtProdutosDaVenda.getColumnModel().getColumn(0).setMinWidth(90);
            jtProdutosDaVenda.getColumnModel().getColumn(0).setPreferredWidth(90);
            jtProdutosDaVenda.getColumnModel().getColumn(0).setMaxWidth(90);
            jtProdutosDaVenda.getColumnModel().getColumn(2).setMinWidth(90);
            jtProdutosDaVenda.getColumnModel().getColumn(2).setPreferredWidth(90);
            jtProdutosDaVenda.getColumnModel().getColumn(2).setMaxWidth(90);
            jtProdutosDaVenda.getColumnModel().getColumn(3).setMinWidth(90);
            jtProdutosDaVenda.getColumnModel().getColumn(3).setPreferredWidth(90);
            jtProdutosDaVenda.getColumnModel().getColumn(3).setMaxWidth(90);
            jtProdutosDaVenda.getColumnModel().getColumn(4).setMinWidth(90);
            jtProdutosDaVenda.getColumnModel().getColumn(4).setPreferredWidth(90);
            jtProdutosDaVenda.getColumnModel().getColumn(4).setMaxWidth(90);
            jtProdutosDaVenda.getColumnModel().getColumn(5).setMinWidth(5);
            jtProdutosDaVenda.getColumnModel().getColumn(5).setPreferredWidth(5);
            jtProdutosDaVenda.getColumnModel().getColumn(5).setMaxWidth(5);
            jtProdutosDaVenda.getColumnModel().getColumn(6).setMinWidth(5);
            jtProdutosDaVenda.getColumnModel().getColumn(6).setPreferredWidth(5);
            jtProdutosDaVenda.getColumnModel().getColumn(6).setMaxWidth(5);
        }

        painelTabelas.add(painelProdutosDaVenda);

        painelListaDeProdutos.setBackground(new java.awt.Color(0, 0, 0));
        painelListaDeProdutos.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        painelListaDeProdutos.setForeground(new java.awt.Color(255, 255, 255));

        jtListaDeProdutos.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jtListaDeProdutos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CÃ³digo", "Produto", "Estoque", "Valor", "ValorCompra", "Desconto"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtListaDeProdutos.setGridColor(new java.awt.Color(255, 204, 255));
        jtListaDeProdutos.setRowHeight(25);
        jtListaDeProdutos.setRowMargin(5);
        jtListaDeProdutos.setSelectionBackground(new java.awt.Color(255, 204, 204));
        jtListaDeProdutos.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jtListaDeProdutos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jtListaDeProdutos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtListaDeProdutosKeyPressed(evt);
            }
        });
        painelListaDeProdutos.setViewportView(jtListaDeProdutos);
        if (jtListaDeProdutos.getColumnModel().getColumnCount() > 0) {
            jtListaDeProdutos.getColumnModel().getColumn(0).setMinWidth(90);
            jtListaDeProdutos.getColumnModel().getColumn(0).setPreferredWidth(90);
            jtListaDeProdutos.getColumnModel().getColumn(0).setMaxWidth(90);
            jtListaDeProdutos.getColumnModel().getColumn(2).setMinWidth(90);
            jtListaDeProdutos.getColumnModel().getColumn(2).setPreferredWidth(90);
            jtListaDeProdutos.getColumnModel().getColumn(2).setMaxWidth(90);
            jtListaDeProdutos.getColumnModel().getColumn(3).setMinWidth(90);
            jtListaDeProdutos.getColumnModel().getColumn(3).setPreferredWidth(90);
            jtListaDeProdutos.getColumnModel().getColumn(3).setMaxWidth(90);
            jtListaDeProdutos.getColumnModel().getColumn(4).setMinWidth(5);
            jtListaDeProdutos.getColumnModel().getColumn(4).setPreferredWidth(5);
            jtListaDeProdutos.getColumnModel().getColumn(4).setMaxWidth(5);
            jtListaDeProdutos.getColumnModel().getColumn(5).setMinWidth(5);
            jtListaDeProdutos.getColumnModel().getColumn(5).setPreferredWidth(5);
            jtListaDeProdutos.getColumnModel().getColumn(5).setMaxWidth(5);
        }

        painelTabelas.add(painelListaDeProdutos);

        painelTituloTabela.setBackground(new java.awt.Color(255, 204, 204));
        painelTituloTabela.setPreferredSize(new java.awt.Dimension(85, 45));
        painelTituloTabela.setLayout(new javax.swing.OverlayLayout(painelTituloTabela));

        jtfProdutosDaVenda.setEditable(false);
        jtfProdutosDaVenda.setBackground(new java.awt.Color(255, 204, 204));
        jtfProdutosDaVenda.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jtfProdutosDaVenda.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfProdutosDaVenda.setText("Produtos Da Venda");
        jtfProdutosDaVenda.setBorder(null);
        jtfProdutosDaVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfProdutosDaVendaActionPerformed(evt);
            }
        });
        painelTituloTabela.add(jtfProdutosDaVenda);

        jtfListaDeProdutos.setEditable(false);
        jtfListaDeProdutos.setBackground(new java.awt.Color(255, 204, 204));
        jtfListaDeProdutos.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jtfListaDeProdutos.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfListaDeProdutos.setText("Lista De Produtos ");
        jtfListaDeProdutos.setBorder(null);
        jtfListaDeProdutos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfListaDeProdutosActionPerformed(evt);
            }
        });
        painelTituloTabela.add(jtfListaDeProdutos);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vania's bg/icone_2.png"))); // NOI18N

        jbInicio.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jbInicio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vania's bg/undo.png"))); // NOI18N
        jbInicio.setText("Inicio");
        jbInicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbInicioActionPerformed(evt);
            }
        });

        painelInfo.setBackground(new java.awt.Color(255, 204, 204));
        painelInfo.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        painelInfo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        painelValorTotal.setBackground(new java.awt.Color(255, 204, 204));
        painelValorTotal.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.gray, java.awt.Color.gray));
        painelValorTotal.setLayout(new javax.swing.OverlayLayout(painelValorTotal));

        jlValorTotal.setBackground(new java.awt.Color(255, 204, 204));
        jlValorTotal.setFont(new java.awt.Font("Dialog", 1, 48)); // NOI18N
        jlValorTotal.setForeground(new java.awt.Color(0, 0, 0));
        jlValorTotal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlValorTotal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vania's bg/prancheta.png"))); // NOI18N
        jlValorTotal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jlValorTotal.setMaximumSize(new java.awt.Dimension(250, 150));
        jlValorTotal.setMinimumSize(new java.awt.Dimension(128, 88));
        jlValorTotal.setOpaque(true);
        jlValorTotal.setPreferredSize(new java.awt.Dimension(128, 88));
        jlValorTotal.setVerifyInputWhenFocusTarget(false);
        painelValorTotal.add(jlValorTotal);

        jtfValorTotal.setEditable(false);
        jtfValorTotal.setBackground(new java.awt.Color(255, 204, 255));
        jtfValorTotal.setForeground(new java.awt.Color(0, 0, 0));
        jtfValorTotal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        jtfValorTotal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfValorTotal.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jtfValorTotal.setOpaque(false);
        painelValorTotal.add(jtfValorTotal);

        painelDesconto.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.gray, java.awt.Color.gray));
        painelDesconto.setLayout(new javax.swing.OverlayLayout(painelDesconto));

        jlDesconto.setBackground(new java.awt.Color(255, 204, 204));
        jlDesconto.setFont(new java.awt.Font("Dialog", 1, 48)); // NOI18N
        jlDesconto.setForeground(new java.awt.Color(0, 0, 0));
        jlDesconto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlDesconto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vania's bg/etiqueta-de-desconto.png"))); // NOI18N
        jlDesconto.setEnabled(false);
        jlDesconto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jlDesconto.setMaximumSize(new java.awt.Dimension(250, 150));
        jlDesconto.setMinimumSize(new java.awt.Dimension(128, 88));
        jlDesconto.setOpaque(true);
        jlDesconto.setPreferredSize(new java.awt.Dimension(128, 88));
        jlDesconto.setVerifyInputWhenFocusTarget(false);
        painelDesconto.add(jlDesconto);

        jtfDesconto.setEditable(false);
        jtfDesconto.setBackground(new java.awt.Color(255, 204, 204));
        jtfDesconto.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        jtfDesconto.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfDesconto.setBorder(null);
        jtfDesconto.setOpaque(false);
        jtfDesconto.setPreferredSize(new java.awt.Dimension(88, 88));
        jtfDesconto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfDescontoActionPerformed(evt);
            }
        });
        painelDesconto.add(jtfDesconto);

        javax.swing.GroupLayout painelInfoLayout = new javax.swing.GroupLayout(painelInfo);
        painelInfo.setLayout(painelInfoLayout);
        painelInfoLayout.setHorizontalGroup(
            painelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painelDesconto, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        painelInfoLayout.setVerticalGroup(
            painelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelInfoLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(painelDesconto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelInfoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(painelValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(114, 114, 114))
        );

        painelDesktop.setLayer(painelBotoes, javax.swing.JLayeredPane.DEFAULT_LAYER);
        painelDesktop.setLayer(painelOpcoesVenda, javax.swing.JLayeredPane.DEFAULT_LAYER);
        painelDesktop.setLayer(painelTabelas, javax.swing.JLayeredPane.DEFAULT_LAYER);
        painelDesktop.setLayer(painelTituloTabela, javax.swing.JLayeredPane.DEFAULT_LAYER);
        painelDesktop.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        painelDesktop.setLayer(jbInicio, javax.swing.JLayeredPane.DEFAULT_LAYER);
        painelDesktop.setLayer(painelInfo, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout painelDesktopLayout = new javax.swing.GroupLayout(painelDesktop);
        painelDesktop.setLayout(painelDesktopLayout);
        painelDesktopLayout.setHorizontalGroup(
            painelDesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelDesktopLayout.createSequentialGroup()
                .addGroup(painelDesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelDesktopLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(painelTituloTabela, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(256, 256, 256))
                    .addGroup(painelDesktopLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(painelDesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(painelTabelas, javax.swing.GroupLayout.PREFERRED_SIZE, 701, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(painelOpcoesVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(painelDesktopLayout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(jbInicio)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(painelDesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelDesktopLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(33, 33, 33))
                    .addGroup(painelDesktopLayout.createSequentialGroup()
                        .addGroup(painelDesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(painelBotoes, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                            .addComponent(painelInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(13, 13, 13))))
        );
        painelDesktopLayout.setVerticalGroup(
            painelDesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelDesktopLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelDesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(painelDesktopLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jbInicio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(painelOpcoesVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(painelDesktopLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(painelInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(painelDesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelDesktopLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(painelTituloTabela, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(painelTabelas, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelDesktopLayout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(painelBotoes, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painelDesktop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painelDesktop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtfProdutosDaVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfProdutosDaVendaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfProdutosDaVendaActionPerformed

    private void jtfListaDeProdutosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfListaDeProdutosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfListaDeProdutosActionPerformed

    private void jbListaProdutosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbListaProdutosActionPerformed
        mostraTabelaProdutos();

    }//GEN-LAST:event_jbListaProdutosActionPerformed

    private void jtfPesquisaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfPesquisaFocusGained
        jtfPesquisa.setText("");
        jbRetornar.setEnabled(true);
    }//GEN-LAST:event_jtfPesquisaFocusGained

    private void jtfPesquisaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfPesquisaFocusLost
        if (jtfPesquisa.getText().equals("")) {
            jtfPesquisa.setText("Nome do Produto");
        }
    }//GEN-LAST:event_jtfPesquisaFocusLost

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed
        som.som();
        int respostaConfirmacao = JOptionPane.showConfirmDialog(
                rootPane,
                "Ao cancelar a venda, todo o processo serÃ¡ apagado.\n\n"
                + "EstÃ¡ certo que Deseja continuar?",
                "ConfirmaÃ§Ã£o",
                JOptionPane.YES_NO_OPTION);

        if (respostaConfirmacao == JOptionPane.NO_OPTION || respostaConfirmacao == JOptionPane.CLOSED_OPTION) {
            //sai do mÃ©todo 
            return;
        }

        retornarTabelaVenda();
        carregarProdutos();
        limparInterface();
    }//GEN-LAST:event_jbCancelarActionPerformed

    private void jbEfetuarVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEfetuarVendaActionPerformed

        //se compra nÃ£o tiver itens
        if (jtProdutosDaVenda.getModel().getRowCount() < 1) {
            JOptionPane.showMessageDialog(rootPane,
                    "VocÃª precisa adicionar itens no carrinho!",
                    "AtencÃ£o",
                    JOptionPane.ERROR_MESSAGE);
            //sai do mÃ©todo 
            return;
        }

        int codigoVenda = 0, codigoProduto = 0;
        listaModelVendasProdutos = new ArrayList<>();
        String troco;
        double custoVenda = 0;
        int quantidade = 0;

        //Diferenciando vendas no cartÃ£o de vendas no dinheiro
        if (DinheiroCartao == "dinheiro") {

            ValorRecebido venda = new ValorRecebido(new javax.swing.JFrame(), closable);
            venda.setLocationRelativeTo(null);
            venda.setVisible(true);
            ValorRecebido = venda.Dinheiro();

            if (ValorRecebido < (ValorTotal)) {
                JOptionPane.showMessageDialog(this, "O valor Recebido Ã© inferior ao Total da venda", "AtenÃ§Ã£o", JOptionPane.INFORMATION_MESSAGE);
            } else {

                try {
                    modelVendas.setVenDataVenda(blDatas.converterDataParaDateUS(new java.util.Date(System.currentTimeMillis())));
                    modelVendas.setVenValorLiquido(ValorTotal);
                    modelVendas.setVenValorBruto(Desconto + ValorTotal);
                    modelVendas.setVenDesconto(Desconto);
                    modelVendas.setVenTipo("Dinheiro");
                    modelVendas.setVenParcelas(1);
                    modelVendas.setCliente(1);
                    modelVendas.setVenEstado("pago");
                    modelVendas.setVenValorPendente(0);
                    modelVendas.setVenValorPago(ValorTotal);

                    int cont = jtProdutosDaVenda.getRowCount();
                    for (int i = 0; i < cont; i++) {
                        quantidade = ((Integer.parseInt(jtProdutosDaVenda.getValueAt(i, 3).toString())));
                        custoVenda = custoVenda + ((Double.valueOf((double) jtProdutosDaVenda.getValueAt(i, 5))) * quantidade);
                        modelVendas.setVenCusto(custoVenda);
                    }

                } catch (Exception ex) {
                    Logger.getLogger(Caixa.class.getName()).log(Level.SEVERE, null, ex);
                }

                int cont = jtProdutosDaVenda.getRowCount();
                troco = String.valueOf((ValorRecebido - ValorTotal));

                codigoVenda = controllerVendas.salvarVendasController(modelVendas);

                for (int i = 0; i < cont; i++) {
                    codigoProduto = (int) jtProdutosDaVenda.getValueAt(i, 0);
                    //zerando as listas
                    modelVendasProdutos = new ModelVendasProdutos();
                    modelProdutos = new ModelProdutos();

                    modelVendasProdutos.setProduto(codigoProduto);
                    modelVendasProdutos.setVendas(codigoVenda);
                    modelVendasProdutos.setVenProValor((double) jtProdutosDaVenda.getValueAt(i, 2));
                    modelVendasProdutos.setVenProQuantidade((Integer.parseInt(jtProdutosDaVenda.getValueAt(i, 3).toString())));
                    modelVendasProdutos.setVenProValorCompra((double) jtProdutosDaVenda.getValueAt(i, 5));

                    //produto
                    modelProdutos.setIdProduto(codigoProduto);
                    //subtraindo a quantidade de produtos vendidos do estoque 
                    modelProdutos.setProEstoque(controllerProdutos.retornarProdutoController(codigoProduto).getProEstoque()
                            - (Integer.parseInt(jtProdutosDaVenda.getValueAt(i, 3).toString())));
                    listaModelVendasProdutos.add(modelVendasProdutos);
                    listaModelProdutos.add(modelProdutos);

                }
                //Salvar os produtos da venda 
                if (controllerVendasProdutos.salvarVendasProdutosController(listaModelVendasProdutos)) {

                    //alterar estoque de produtos passando uma lista de produtos
                    controllerProdutos.alterarEstoqueProdutosController(listaModelProdutos);
                    JOptionPane.showMessageDialog(this, "Venda a vista efetuada com sucesso"
                            + "\n O troco Ã© de R$" + troco, "ATENÃÃO", JOptionPane.INFORMATION_MESSAGE);
                    limparInterface();
                    retornarTabelaVenda();

                } else {
                    //Exibe mensagens de erro para o usuÃ¡rio
                    som.som();
                    JOptionPane.showMessageDialog(rootPane,
                            "Houve Algum problema com essa funcionalidade"
                            + "\n Procure o administrador do sistema!"
                            + "\n Angelo Fernandes (81)98422-9450!",
                            "Erro",
                            JOptionPane.ERROR_MESSAGE);
                }

            }
        }

        //Venda no cartÃ£o
        if (DinheiroCartao == "cartao") {

            ParcelasCartao cartao = new ParcelasCartao(new javax.swing.JFrame(), closable);
            cartao.setLocationRelativeTo(null);
            cartao.setVisible(true);
            Parcelas = cartao.Cartao();

            try {

                modelVendas.setVenDataVenda(blDatas.converterDataParaDateUS(new java.util.Date(System.currentTimeMillis())));
                modelVendas.setVenValorLiquido(ValorTotal);
                modelVendas.setVenValorBruto(Desconto + ValorTotal);
                modelVendas.setVenDesconto(Desconto);
                modelVendas.setVenTipo("CartÃ£o");
                modelVendas.setVenParcelas(Parcelas);
                modelVendas.setVenEstado("pago");
                modelVendas.setVenValorPendente(0);
                modelVendas.setVenValorPago(ValorTotal);

                int cont = jtProdutosDaVenda.getRowCount();
                for (int i = 0; i < cont; i++) {
                    quantidade = ((Integer.parseInt(jtProdutosDaVenda.getValueAt(i, 3).toString())));
                    custoVenda = custoVenda + ((Double.valueOf((double) jtProdutosDaVenda.getValueAt(i, 5))) * quantidade);
                    modelVendas.setVenCusto(custoVenda);
                }

            } catch (Exception ex) {
                Logger.getLogger(Caixa.class.getName()).log(Level.SEVERE, null, ex);
            }

            codigoVenda = controllerVendas.salvarVendasController(modelVendas);
            int cont = jtProdutosDaVenda.getRowCount();

            for (int i = 0; i < cont; i++) {
                codigoProduto = (int) jtProdutosDaVenda.getValueAt(i, 0);

                //zerando as listas
                modelVendasProdutos = new ModelVendasProdutos();
                modelProdutos = new ModelProdutos();

                modelVendasProdutos.setProduto(codigoProduto);
                modelVendasProdutos.setVendas(codigoVenda);
                modelVendasProdutos.setVenProValor((double) jtProdutosDaVenda.getValueAt(i, 2));
                modelVendasProdutos.setVenProQuantidade((Integer.parseInt(jtProdutosDaVenda.getValueAt(i, 3).toString())));
                modelVendasProdutos.setVenProValorCompra((double) jtProdutosDaVenda.getValueAt(i, 5));

                //produto
                modelProdutos.setIdProduto(codigoProduto);
                //subtraindo a quantidade de produtos vendidos do estoque 
                modelProdutos.setProEstoque(controllerProdutos.retornarProdutoController(codigoProduto).getProEstoque()
                        - (Integer.parseInt(jtProdutosDaVenda.getValueAt(i, 3).toString())));
                listaModelVendasProdutos.add(modelVendasProdutos);
                listaModelProdutos.add(modelProdutos);
            }
            //Salvar os produtos da venda 
            if (controllerVendasProdutos.salvarVendasProdutosController(listaModelVendasProdutos)) {

                //alterar estoque de produtos passando uma lista de produtos
                controllerProdutos.alterarEstoqueProdutosController(listaModelProdutos);
                JOptionPane.showMessageDialog(this, "Venda no cartÃ£o efetuada com sucesso"
                        + "\n parcelada em " + Parcelas + " vezes", "ATENÃÃO", JOptionPane.INFORMATION_MESSAGE);
                limparInterface();
                retornarTabelaVenda();

            } else {
                //Exibe mensagens de erro para o usuÃ¡rio
                som.som();
                JOptionPane.showMessageDialog(rootPane,
                        "Houve Algum problema com essa funcionalidade"
                        + "\n Procure o administrador do sistema!"
                        + "\n Angelo Fernandes (81)98422-9450!",
                        "Erro",
                        JOptionPane.ERROR_MESSAGE);
            }

        }

        //venda no prazo
        if (DinheiroCartao == "prazo") {

            ClienteVenda clientes = new ClienteVenda(new javax.swing.JFrame(), closable);
            clientes.setLocationRelativeTo(null);
            clientes.setVisible(true);
            cliente = clientes.Cliente();

            try {
                modelVendas.setVenDataVenda(blDatas.converterDataParaDateUS(new java.util.Date(System.currentTimeMillis())));
                modelVendas.setVenValorLiquido(ValorTotal);
                modelVendas.setVenValorBruto(Desconto + ValorTotal);
                modelVendas.setVenDesconto(Desconto);
                modelVendas.setVenTipo("Prazo");
                modelVendas.setVenParcelas(1);
                modelVendas.setCliente(cliente);
                modelVendas.setVenEstado("pendente");
                modelVendas.setVenValorPendente(ValorTotal);
                modelVendas.setVenValorPago(0);

                int cont = jtProdutosDaVenda.getRowCount();
                for (int i = 0; i < cont; i++) {
                    quantidade = ((Integer.parseInt(jtProdutosDaVenda.getValueAt(i, 3).toString())));
                    custoVenda = custoVenda + ((Double.valueOf((double) jtProdutosDaVenda.getValueAt(i, 5))) * quantidade);
                    modelVendas.setVenCusto(custoVenda);
                }

            } catch (Exception ex) {
                Logger.getLogger(Caixa.class.getName()).log(Level.SEVERE, null, ex);
            }

            int cont = jtProdutosDaVenda.getRowCount();
            codigoVenda = controllerVendas.salvarVendasController(modelVendas);

            for (int i = 0; i < cont; i++) {
                codigoProduto = (int) jtProdutosDaVenda.getValueAt(i, 0);

                //zerando as listas
                modelVendasProdutos = new ModelVendasProdutos();
                modelProdutos = new ModelProdutos();

                modelVendasProdutos.setProduto(codigoProduto);
                modelVendasProdutos.setVendas(codigoVenda);
                modelVendasProdutos.setVenProValor((double) jtProdutosDaVenda.getValueAt(i, 2));
                modelVendasProdutos.setVenProQuantidade((Integer.parseInt(jtProdutosDaVenda.getValueAt(i, 3).toString())));
                modelVendasProdutos.setVenProValorCompra(custoVenda + custoVenda);

                //produto
                modelProdutos.setIdProduto(codigoProduto);
                //subtraindo a quantidade de produtos vendidos do estoque 
                modelProdutos.setProEstoque(controllerProdutos.retornarProdutoController(codigoProduto).getProEstoque()
                        - (Integer.parseInt(jtProdutosDaVenda.getValueAt(i, 3).toString())));
                listaModelVendasProdutos.add(modelVendasProdutos);
                listaModelProdutos.add(modelProdutos);
            }
            //Salvar os produtos da venda 
            if (controllerVendasProdutos.salvarVendasProdutosController(listaModelVendasProdutos)) {

                //alterar estoque de produtos passando uma lista de produtos
                controllerProdutos.alterarEstoqueProdutosController(listaModelProdutos);
                JOptionPane.showMessageDialog(this, "Venda no prazo registrada com sucesso \n aguardando pagamento na aba Relatorios/Vendas pendentes", "ATENÃÃO", JOptionPane.INFORMATION_MESSAGE);
                limparInterface();
                retornarTabelaVenda();

            } else {
                //Exibe mensagens de erro para o usuÃ¡rio
                som.som();
                JOptionPane.showMessageDialog(rootPane,
                        "Houve Algum problema com essa funcionalidade"
                        + "\n Procure o administrador do sistema!"
                        + "\n Angelo Fernandes (81)98422-9450!",
                        "Erro",
                        JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_jbEfetuarVendaActionPerformed

    private void jbRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoverActionPerformed
        //avisa que nÃ£o existe cliente para registrar junto a venda
        int respostaConfirmacao = JOptionPane.showConfirmDialog(
                rootPane,
                "VocÃª estÃ¡ removendo um item do carrinho.\n\n"
                + "Deseja continuar?",
                "ConfirmaÃ§Ã£o",
                JOptionPane.YES_NO_OPTION);

        //se resposa for nÃ£o para continuar o registro da venda
        if (respostaConfirmacao == JOptionPane.NO_OPTION || respostaConfirmacao == JOptionPane.CLOSED_OPTION) {
            //sai do mÃ©todo 
            return;
        }

        try {
            int linha = jtProdutosDaVenda.getSelectedRow();
            DefaultTableModel modelo = (DefaultTableModel) jtProdutosDaVenda.getModel();
            modelo.removeRow(linha);
            somarValorTotalProdutos();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "CÃ³digo invÃ¡lido ou nenhum registro foi selecionado!", "Aviso", JOptionPane.ERROR_MESSAGE);
        }
        retornarTabelaVenda();
        if (jtfValorTotal.getText().equals("R$0.0")) {
            jtfValorTotal.setVisible(false);
            jlValorTotal.setVisible(true);
        }
    }//GEN-LAST:event_jbRemoverActionPerformed

    private void jbDescontoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDescontoActionPerformed
        Desconto desconto = new Desconto(new javax.swing.JFrame(), closable);
        desconto.setLocationRelativeTo(null);
        desconto.setVisible(true);
        Desconto = desconto.Desconto();

        aplicarDescontos();
        somarValorTotalProdutos();

    }//GEN-LAST:event_jbDescontoActionPerformed

    private void jbEnviarProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEnviarProdutoActionPerformed

        enviarProdutos();
    }//GEN-LAST:event_jbEnviarProdutoActionPerformed

    private void jbCartaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCartaoActionPerformed
        DinheiroCartao = "cartao";
        jbDinheiro.setEnabled(true);
        jbCartao.setEnabled(false);
        jbPrazo.setEnabled(true);
        jtfTipoVenda.setText("Venda Parcelada");
    }//GEN-LAST:event_jbCartaoActionPerformed

    private void jbDinheiroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDinheiroActionPerformed
        DinheiroCartao = "dinheiro";
        jbDinheiro.setEnabled(false);
        jbCartao.setEnabled(true);
        jbPrazo.setEnabled(true);
        jtfTipoVenda.setText("Venda a Vista");
    }//GEN-LAST:event_jbDinheiroActionPerformed

    private void jbRetornarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRetornarActionPerformed
        jbRetornar.setEnabled(false);
        pesquisarTudo();
        jtfPesquisa.setText("Nome do Produto");
    }//GEN-LAST:event_jbRetornarActionPerformed

    private void jtfPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfPesquisaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfPesquisaActionPerformed

    private void jbPrazoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPrazoActionPerformed
        DinheiroCartao = "prazo";
        jbDinheiro.setEnabled(true);
        jbCartao.setEnabled(true);
        jbPrazo.setEnabled(false);
        jtfTipoVenda.setText("Venda no Prazo");
    }//GEN-LAST:event_jbPrazoActionPerformed

    private void jtfTipoVendaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfTipoVendaFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfTipoVendaFocusGained

    private void jtfTipoVendaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfTipoVendaFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfTipoVendaFocusLost

    private void jtfTipoVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfTipoVendaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfTipoVendaActionPerformed

    private void jtListaDeProdutosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtListaDeProdutosKeyPressed

    }//GEN-LAST:event_jtListaDeProdutosKeyPressed

    private void painelDesktopKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_painelDesktopKeyPressed

    }//GEN-LAST:event_painelDesktopKeyPressed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed

    }//GEN-LAST:event_formKeyPressed

    private void jbListaProdutosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbListaProdutosKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_P) {
            mostraTabelaProdutos();
            jtListaDeProdutos.requestFocus();
        }
    }//GEN-LAST:event_jbListaProdutosKeyPressed

    private void jtfPesquisaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfPesquisaKeyTyped

        DefaultTableModel modelo = (DefaultTableModel) this.jtListaDeProdutos.getModel();
        final TableRowSorter<TableModel> classificador = new TableRowSorter<>(modelo);

        jtfPesquisa.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent ke) {
                classificador.setRowFilter(RowFilter.regexFilter("(?i)" + jtfPesquisa.getText(), 1));
                jtListaDeProdutos.setRowSorter(classificador);
            }
        });
    }//GEN-LAST:event_jtfPesquisaKeyTyped

    private void jbInicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbInicioActionPerformed
        if (ValorTotal != 0.0) {
            double soma = ValorTotal;
            retornarTabelaVenda();
            String texto = "R$" + (String.valueOf(soma));
            jtfValorTotal.setText(texto);
            valorTotal();
        } else{
            retornarTabelaVenda();
        }
        
    }//GEN-LAST:event_jbInicioActionPerformed

    private void jtfDescontoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfDescontoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfDescontoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JButton jbCartao;
    private javax.swing.JButton jbDesconto;
    private javax.swing.JButton jbDinheiro;
    private javax.swing.JButton jbEfetuarVenda;
    private javax.swing.JButton jbEnviarProduto;
    private javax.swing.JButton jbInicio;
    private javax.swing.JButton jbListaProdutos;
    private javax.swing.JButton jbPrazo;
    private javax.swing.JButton jbRemover;
    private javax.swing.JButton jbRetornar;
    private javax.swing.JLabel jlDesconto;
    private javax.swing.JLabel jlValorTotal;
    private javax.swing.JTable jtListaDeProdutos;
    private javax.swing.JTable jtProdutosDaVenda;
    private javax.swing.JTextField jtfDesconto;
    private javax.swing.JTextField jtfListaDeProdutos;
    private javax.swing.JTextField jtfPesquisa;
    private javax.swing.JTextField jtfProdutosDaVenda;
    private javax.swing.JTextField jtfTipoVenda;
    private javax.swing.JFormattedTextField jtfValorTotal;
    private javax.swing.JPanel painelBotoes;
    private javax.swing.JPanel painelDesconto;
    private javax.swing.JLayeredPane painelDesktop;
    private javax.swing.JPanel painelDinheiroCartao;
    private javax.swing.JPanel painelEnviarProduto;
    private javax.swing.JPanel painelInfo;
    private javax.swing.JPanel painelLista;
    private javax.swing.JScrollPane painelListaDeProdutos;
    private javax.swing.JPanel painelOpcoesVenda;
    private javax.swing.JPanel painelPesquisa;
    private javax.swing.JScrollPane painelProdutosDaVenda;
    private javax.swing.JPanel painelSobreporBTN1;
    private javax.swing.JPanel painelSobreporBTN2;
    private javax.swing.JPanel painelTabelas;
    private javax.swing.JPanel painelTituloTabela;
    private javax.swing.JPanel painelValorTotal;
    // End of variables declaration//GEN-END:variables

    //MÃTODOS 
    //Modifica a ordem de sopreposiÃ§Ãµes para exibir a lista de produtos e os botÃµes de envio
    private void mostraTabelaProdutos() {
        pesquisarTudo();
        jtfPesquisa.setText("Nome do Produto");
        carregarProdutos();

        jbListaProdutos.setEnabled(false);
        jbListaProdutos.setVisible(false);

        jbRetornar.setVisible(true);
        jbInicio.setVisible(true);

        painelLista.setVisible(false);

        painelProdutosDaVenda.setVisible(false);

        painelListaDeProdutos.setVisible(true);

        painelDinheiroCartao.setVisible(false);

        jtfProdutosDaVenda.setVisible(false);
        jtfListaDeProdutos.setVisible(true);

        jbEnviarProduto.setEnabled(true);
        jbEnviarProduto.setVisible(true);

        jtfPesquisa.setVisible(true);
        jbRetornar.setVisible(true);

        jtfTipoVenda.setVisible(false);
    }

    //retorna para a ordem inicial de sobreposiÃ§Ã£o com o produto selecionado inserido na tabela
    private void retornarTabelaVenda() {

        jbListaProdutos.setEnabled(true);
        jbListaProdutos.setVisible(true);

        jbRetornar.setEnabled(false);
        jbRetornar.setVisible(false);
        jbInicio.setVisible(false);

        painelLista.setVisible(true);

        painelProdutosDaVenda.setVisible(true);

        painelListaDeProdutos.setVisible(false);

        painelDinheiroCartao.setVisible(true);

        jtfProdutosDaVenda.setVisible(true);
        jtfListaDeProdutos.setVisible(false);

        jbEnviarProduto.setEnabled(false);
        jbEnviarProduto.setVisible(false);

        jtfPesquisa.setVisible(false);
        jbRetornar.setVisible(false);

        jtfTipoVenda.setVisible(true);

    }

    //carrega os proutos do estoque na lista de produtos
    private void carregarProdutos() {
        listaModelProdutos = controllerProdutos.retornarListaProdutoEstoqueController();
        DefaultTableModel modelo = (DefaultTableModel) jtListaDeProdutos.getModel();
        modelo.setNumRows(0);
        //inserir produtos na tabela
        int cont = listaModelProdutos.size();
        for (int i = 0; i < cont; i++) {
            modelo.addRow(new Object[]{
                listaModelProdutos.get(i).getIdProduto(),
                listaModelProdutos.get(i).getProNome(),
                listaModelProdutos.get(i).getProEstoque(),
                listaModelProdutos.get(i).getProValor(),
                listaModelProdutos.get(i).getProValorCompra(),
                listaModelProdutos.get(i).getProDesconto()
            });
        }
    }

    //adciona os produtos selecionados na tabela da venda
    private boolean carregarProdutoDaVenda() {
        try {
            int linha = jtListaDeProdutos.getSelectedRow();
            int codigoProduto = (int) jtListaDeProdutos.getValueAt(linha, 0);
            modelProdutos = controllerProdutos.retornarProdutoController(codigoProduto);

            DefaultTableModel modelo = (DefaultTableModel) jtProdutosDaVenda.getModel();
            int cont = 0;

            if (Quantidade <= modelProdutos.getProEstoque()) {
                for (int i = 0; i < cont; i++) {
                    modelo.setNumRows(0);
                }
                //preenchendo a linha adcionada
                modelo.addRow(new Object[]{
                    modelProdutos.getIdProduto(),
                    modelProdutos.getProNome(),
                    modelProdutos.getProValor(),
                    Quantidade,
                    Quantidade * (modelProdutos.getProValor() - modelProdutos.getProDesconto()),
                    modelProdutos.getProValorCompra()
                });
            } else {
                JOptionPane.showMessageDialog(rootPane,
                        " A quantidade de produtos solicitadas nÃ£o existe em estoque! \n"
                        + "A quantidade deste produto em estoque Ã© " + modelProdutos.getProEstoque() + ".",
                        "AtenÃ§Ã£o",
                        JOptionPane.INFORMATION_MESSAGE);
                return false;
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "CÃ³digo invÃ¡lido ou nenhum registro foi selecionado!", "Aviso", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    //limpa interface e a deixa no estado inicial
    private void limparInterface() {
        //tabela dos produtos a serem vendidos
        DefaultTableModel modelo = (DefaultTableModel) jtProdutosDaVenda.getModel();
        modelo.setNumRows(0);

        //painel Interface
        jlDesconto.setText("");

        jtfValorTotal.setText("");

        jlDesconto.setVisible(true);

        jlValorTotal.setVisible(true);
    }

    //customizaÃ§Ã£o das tabelas na interface
    private void customTable() {

        JTableHeader cabecalho = jtProdutosDaVenda.getTableHeader();
        //cabecalho.setBackground(Color.gray);
        cabecalho.setFont((new java.awt.Font("Dialog", 1, 18)));

        JTableHeader cabecalho2 = jtListaDeProdutos.getTableHeader();
        cabecalho2.setFont((new java.awt.Font("Dialog", 1, 18)));

    }

    //Soma todos os protudos da Venda
    private void somarValorTotalProdutos() {
        double soma = 0, valor;
        int cont = jtProdutosDaVenda.getRowCount();
        for (int i = 0; i < cont; i++) {
            valor = (double) jtProdutosDaVenda.getValueAt(i, 4);
            soma = soma + valor;
        }

        soma = soma - Desconto;
        String texto = "R$" + (String.valueOf(soma));
        jtfValorTotal.setText(texto);
        valorTotal();
        ValorTotal = f.converterVirgulaParaPonto(String.valueOf(soma));
    }

    //pesquisa na tabela lista de produtos com base no nome
    private void pesquisar() {
        DefaultTableModel modelo = (DefaultTableModel) this.jtListaDeProdutos.getModel();
        final TableRowSorter<TableModel> classificador = new TableRowSorter<>(modelo);
        this.jtListaDeProdutos.setRowSorter(classificador);
        String textoPesquisa = jtfPesquisa.getText().toUpperCase();
        classificador.setRowFilter(RowFilter.regexFilter(textoPesquisa, 1));
    }

    //mantÃ©m a lista de produtos completa mesmo apÃ³s pesquisa
    private void pesquisarTudo() {
        DefaultTableModel modelo = (DefaultTableModel) this.jtListaDeProdutos.getModel();
        final TableRowSorter<TableModel> classificador = new TableRowSorter<>(modelo);
        this.jtListaDeProdutos.setRowSorter(classificador);
        String textoPesquisa = "";
        classificador.setRowFilter(RowFilter.regexFilter(textoPesquisa, 1));
    }

    //modifica o painel Info sobre o valor total da venda
    private void valorTotal() {
        if (!jtfValorTotal.getText().equals("")) {
            jtfValorTotal.setVisible(true);
            jlValorTotal.setVisible(false);
        }
    }

    //aplica o desconto desejado sobre o valor total da venda e moodifica o painel Info
    private void aplicarDescontos() {
        try {
            jlDesconto.setText(String.valueOf(Desconto));
            if (Desconto == 0) {
            } else {
                jlDesconto.setVisible(false);
                jtfDesconto.setVisible(true);
            }
        } catch (NumberFormatException e) {
        }
    }

    public Double enviaRValor() {
        return ValorRecebido;
    }

    //enviar o produto selecionado para a venda com a sua quantidade
    private void enviarProdutos() {
        EnviarProduto enviarProduto = new EnviarProduto(new javax.swing.JFrame(), closable);
        enviarProduto.setLocationRelativeTo(null);
        enviarProduto.setVisible(true);
        Quantidade = enviarProduto.Enviar();

        //verificar se o produto consta em estoque    
        //para poder prossseguir no sistema
        if (carregarProdutoDaVenda()) {
            retornarTabelaVenda();
            somarValorTotalProdutos();
            carregarProdutos();
        }
    }

    public void internalFrameClosed(InternalFrameEvent e) {
        ViewPrincipal principal = new ViewPrincipal();
        principal.caixa = null;
    }

    public void Refresh() {
        limparInterface();
        retornarTabelaVenda();
    }
}
